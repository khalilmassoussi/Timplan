<div id="addTask" class="modal fade">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 id="eventInfo" class="modal-title">Ajouter un Task</h5>
                <button type="button" class="close" data-dismiss="modal" id="close"><span
                            aria-hidden="true">×</span> <span
                            class="sr-only">close</span></button>
            </div>{{ form_start(form, {'name':'new', 'method' : 'post', 'action': path('taskevent_new') }) }}
            <div id="modalBody" class="modal-body">
                <div class="card">
                    <div class="card-body">
                        <table class="table table-borderless table-sm">
                            <tr>
                                <th>Type</th>
                                <td colspan="2">
                                    <div class="form-group">
                                        {% for key, allDayItem in form.allDay %}
                                            <div class="form-check">
                                                {{ form_widget(allDayItem, {'attr': {'class': 'form-check-input'}}) }}
                                                {{ form_label(allDayItem) }}
                                                {#                                            <input class="form-check-input" type="radio" name="radio1">#}
                                                {#                                            <label class="form-check-label">Radio</label>#}
                                            </div>
                                        {% endfor %}

                                    </div>
                                </td>
                            </tr>
                            <tr>
                                <th>Date</th>
                                <td>{{ form_widget(form.start, {'attr': {'class': 'date form-control' , 'autocomplete': 'off'}}) }}</td>
                                <td>{{ form_widget(form.end, {'attr': {'class': 'date form-control', 'autocomplete': 'off'}}) }}</td>
                            </tr>
                            <tr>
                                <th>Assigner à</th>
                                <td>{{ form_widget(form.utilisateur, {'attr': {'class': 'form-control'}}) }}</td>
                                <td>{{ form_widget(form.client, {'attr': {'class': 'form-control'}}) }}</td>
                            </tr>
                            <tr>
                                <th>Task</th>
                                <td>{{ form_widget(form.activite, {'attr': {'class': 'form-control'}}) }}</td>
                                <td>{{ form_widget(form.task, {'attr': {'class': 'form-control'}}) }}</td>
                            </tr>
                            <tr>
                                <th>Statut</th>
                                <td>{{ form_widget(form.statut, {'attr': {'class': 'form-control'}}) }}</td>
                                <td>{{ form_widget(form.motif, {'attr': {'class': 'form-control'}}) }}</td>
                            </tr>
                            <tr>
                                <th>Étiquette/Site</th>
                                <td> {{ form_widget(form.etiquette, {'attr': {'class': 'form-control'}}) }}</td>

                                <td>{{ form_widget(form.site, {'attr': {'class': 'form-control'}}) }}</td>

                            </tr>
                            <tr>
                                <th></th>
                                <td> {{ form_row(form.progression, {'attr': {'class': 'custom-range'}}) }}</td>
                                <td>{{ form_widget(form.rapport, {'attr': {'class': 'form-control'}}) }}</td>
                            </tr>
                        </table>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <input type="submit" class="btn btn-primary" value="Créer"/>
            </div>
            {{ form_end(form) }}
        </div>
    </div>
</div>
<style>
    .table {
        font-size: 14px;
    }

</style>
<script>
    var $activive = $('#timsoft_tasksbundle_taskevent_activite');
    // When sport gets selected ...
    $activive.change(function () {
        // ... retrieve the corresponding form.
        var $form = $(this).closest('form');
        // Simulate form data, but only include the selected sport value.
        var data = {};
        data[$activive.attr('name')] = $activive.val();
        // Submit data via AJAX to the form's action path.
        $.ajax({
            url: $form.attr('action'),
            type: $form.attr('method'),
            data: data,
            success: function (html) {
                // Replace current position field ...
                $('#timsoft_tasksbundle_taskevent_task').replaceWith(
                    // ... with the returned one from the AJAX response.
                    $(html).find('#timsoft_tasksbundle_taskevent_task')
                );
                // Position field now displays the appropriate positions.
            }
        });
    });
</script>
<script>
    $('form[name="new"]').submit(function (event) {
        console.log('xx');
        event.preventDefault();
        if (new Date($('form[name="new"] #timsoft_tasksbundle_taskevent_start').datetimepicker('getValue')) > new Date($('form[name="new"] #timsoft_tasksbundle_taskevent_end').datetimepicker('getValue'))) {
            alert('Date non valable, veuillez la vérifier et réessayer');
            $('form[name="new"] #timsoft_tasksbundle_taskevent_start').addClass('is-invalid');
            $('form[name="new"] #timsoft_tasksbundle_taskevent_end').addClass('is-invalid');
        } else {
            var cc = new FormData(this);
            var url = "{{ path('taskevent_new') }}";
            var formSerialize = $(this).serialize();

            $.ajax({
                url: url,
                data: formSerialize,
                type: 'POST',
                dataType: "json",
            }).done(function (response) {
                $('#addTask').modal('hide');
                if (response.PlanningExist) {
                    // alert('Message');
                }
            });
        }
        // $.post(url, formSerialize, function (response) {
        //     $('#addTask').modal('hide');
        //     // alert(response.status);
        //     $(this).find('input');
        //     // $('#calendar').refetchEvents();
        // }, 'JSON');

    });
    var slider = $('form[name="new"] #timsoft_tasksbundle_taskevent_progression');
    $(document).ready(function () {
        // you may need to change this code if you are not using Bootstrap Datepicker
        $.datetimepicker.setLocale('fr');
        $('form[name="new"] #timsoft_tasksbundle_taskevent_start').attr('autocomplete', 'off');
        $('form[name="new"] #timsoft_tasksbundle_taskevent_utilisateur').select2({
            placeholder: 'Assigner à'
        });
        $('form[name="new"] #timsoft_tasksbundle_taskevent_client').select2({
            placeholder: 'Choisir le client'
        });
        $('form[name="new"] input[name="timsoft_tasksbundle_taskevent[allDay]"]').change(function () {
            if (this.value == 1) {
                $('form[name="new"] #timsoft_tasksbundle_taskevent_start').datetimepicker({
                    format: 'd F Y',
                    timepicker: false,
                    onShow: function (ct) {
                        this.setOptions({
                            maxDate: $('#timsoft_tasksbundle_taskevent_end').val() ? $('#timsoft_tasksbundle_taskevent_end').val() : false,
                            formatDate: 'd F Y H:i'
                        })
                    },
                    onChangeDateTime: function (dp, $input) {
                        console.log($input.val());
                        if (new Date($('form[name="new"] #timsoft_tasksbundle_taskevent_start').datetimepicker('getValue')) > new Date($('form[name="new"] #timsoft_tasksbundle_taskevent_end').datetimepicker('getValue'))) {
                            // alert('Date non valable, veuillez la vérifier et réessayer');
                            $('form[name="new"] #timsoft_tasksbundle_taskevent_start').addClass('is-invalid');
                            $('form[name="new"] #timsoft_tasksbundle_taskevent_end').addClass('is-invalid');
                            console.log($input.val());
                        } else {
                            $('form[name="new"] #timsoft_tasksbundle_taskevent_start').removeClass('is-invalid');
                            $('form[name="new"] #timsoft_tasksbundle_taskevent_end').removeClass('is-invalid');
                        }
                    }
                });
                $('form[name="new"] #timsoft_tasksbundle_taskevent_end').datetimepicker({
                    format: 'd F Y',
                    timepicker: false,
                    onShow: function (ct) {
                        this.setOptions({
                            minDate: $('#timsoft_tasksbundle_taskevent_start').val() ? $('#timsoft_tasksbundle_taskevent_start').val() : false,
                            formatDate: 'd F Y H:i'
                        })
                    },
                    onChangeDateTime: function (dp, $input) {
                        if (new Date($('form[name="new"] #timsoft_tasksbundle_taskevent_start').datetimepicker('getValue')) > new Date($('form[name="new"] #timsoft_tasksbundle_taskevent_end').datetimepicker('getValue'))) {
                            // alert('Date non valable, veuillez la vérifier et réessayer');
                            $('form[name="new"] #timsoft_tasksbundle_taskevent_start').addClass('is-invalid');
                            $('form[name="new"] #timsoft_tasksbundle_taskevent_end').addClass('is-invalid');
                            console.log($input.val());
                        } else {
                            $('form[name="new"] #timsoft_tasksbundle_taskevent_start').removeClass('is-invalid');
                            $('form[name="new"] #timsoft_tasksbundle_taskevent_end').removeClass('is-invalid');
                        }
                    }
                });
            } else {
                $('form[name="new"] #timsoft_tasksbundle_taskevent_start').datetimepicker({
                    format: 'd F Y H:i',
                    timepicker: true,
                    onShow: function (ct) {
                        this.setOptions({
                            maxDate: $('#timsoft_tasksbundle_taskevent_end').val() ? $('#timsoft_tasksbundle_taskevent_end').val() : false
                            , formatDate: 'd F Y H:i'
                        })
                    },
                    onChangeDateTime: function (dp, $input) {
                        if (new Date($('form[name="new"] #timsoft_tasksbundle_taskevent_start').datetimepicker('getValue')) > new Date($('form[name="new"] #timsoft_tasksbundle_taskevent_end').datetimepicker('getValue'))) {
                            // alert('Date non valable, veuillez la vérifier et réessayer');
                            $('form[name="new"] #timsoft_tasksbundle_taskevent_start').addClass('is-invalid');
                            $('form[name="new"] #timsoft_tasksbundle_taskevent_end').addClass('is-invalid');
                            console.log($input.val());
                        } else {
                            $('form[name="new"] #timsoft_tasksbundle_taskevent_start').removeClass('is-invalid');
                            $('form[name="new"] #timsoft_tasksbundle_taskevent_end').removeClass('is-invalid');
                        }
                    }
                });

                $('form[name="new"] #timsoft_tasksbundle_taskevent_end').datetimepicker({
                    format: 'd F Y H:i',
                    timepicker: true,
                    onShow: function (ct) {
                        this.setOptions({
                            minDate: $('#timsoft_tasksbundle_taskevent_start').val() ? $('#timsoft_tasksbundle_taskevent_start').val() : false
                            , formatDate: 'd F Y H:i'
                        })
                    },
                    onChangeDateTime: function (dp, $input) {
                        if (new Date($('form[name="new"] #timsoft_tasksbundle_taskevent_start').datetimepicker('getValue')) > new Date($('form[name="new"] #timsoft_tasksbundle_taskevent_end').datetimepicker('getValue'))) {
                            // alert('Date non valable, veuillez la vérifier et réessayer');
                            $('form[name="new"] #timsoft_tasksbundle_taskevent_start').addClass('is-invalid');
                            $('form[name="new"] #timsoft_tasksbundle_taskevent_end').addClass('is-invalid');
                            console.log($input.val());
                        } else {
                            $('form[name="new"] #timsoft_tasksbundle_taskevent_start').removeClass('is-invalid');
                            $('form[name="new"] #timsoft_tasksbundle_taskevent_end').removeClass('is-invalid');
                        }
                    }

                });
            }
        });
        $('form[name="new"] #timsoft_tasksbundle_taskevent_motif').parent().hide();
        $('form[name="new"] #timsoft_tasksbundle_taskevent_statut').on('change', function (e) {
            if (this.value !== 'Bloqué') {
                $('form[name="new"] #timsoft_tasksbundle_taskevent_motif').parent().hide();
                if (this.value === 'Done') {
                    slider.val(100);
                    sliderVal();
                }
                if (this.value === 'To DO') {
                    slider.val(0);
                    sliderVal();
                }
                if (this.value === 'In Progress') {
                    slider.val(1);
                    sliderVal();
                }
            } else {
                $('form[name="new"] #timsoft_tasksbundle_taskevent_motif').parent().show();
                slider.val(0);
                sliderVal();
            }
            sliderVal();
        });
        slider.val(0);
        sliderVal();

    });
    var label = $("label[for='" + 'timsoft_tasksbundle_taskevent_progression' + "']");
    label.append(': <div id="prog" style="display: inline-block"></div>');

    function sliderVal() {

        var val = slider.parent();
        var newV = $('#prog');
        newV.html('&nbsp;' + slider.val() + '%');
        newV.css('background-color', perc2color(slider.val()));
        slider.on('change', function () {
            newV.css('background-color', perc2color(this.value));
            newV.html('&nbsp;' + this.value + '%');
        });
    }

    function perc2color(perc) {
        var r, g, b = 0;
        if (perc < 50) {
            r = 255;
            g = Math.round(5.1 * perc);
        } else {
            g = 255;
            r = Math.round(510 - 5.10 * perc);
        }
        var h = r * 0x10000 + g * 0x100 + b * 0x1;
        return '#' + ('000000' + h.toString(16)).slice(-6);
    }
</script>
{% form_theme form _self %}
{#{% block choice_widget %}#}
{#    <div>#}
{#        <input type="radio" {{ block('widget_attributes') }}{% if value is defined %} value="{{ value }}"{% endif %}{% if checked %} checked="checked"{% endif %} />#}

{#    </div>#}
{#{% endblock choice_widget %}#}
