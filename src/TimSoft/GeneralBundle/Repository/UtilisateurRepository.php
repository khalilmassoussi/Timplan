<?php

namespace TimSoft\GeneralBundle\Repository;

/**
 * UtilisateurRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UtilisateurRepository extends \Doctrine\ORM\EntityRepository
{
    public function getNBUtilisateur()
    {
        return intval($this->createQueryBuilder('l')
            ->select('COUNT(l)')
            ->getQuery()
            ->getSingleScalarResult());
    }

//    public function NBUtilisateurNonValide() {
//        return intval($this->createQueryBuilder('l')
//                        ->select('COUNT(l)')
//                        ->where('l.confirmationToken != :param')
//                        ->orWhere('l.confirmationToken != :param')
//                        ->setParameter('param', null)
//                        ->getQuery()
//                        ->getSingleScalarResult());
//    }


    public function OntDroit($id)
    {
        $Role = $this->getEntityManager()->getRepository('TimSoftGeneralBundle:DroitAccesGroupe')->getGroupeAutorises($id);
        $Users = $this->getEntityManager()->getRepository('TimSoftGeneralBundle:DroitAccesPersonne')->getPersonneExceptionnelle($id, 1);
        //$UserInterdits =  $this->getEntityManager()->getRepository('TimSoftGeneralBundle:DroitAccesPersonne')->getPersonneExceptionnelle($id,0);
        return $this->createQueryBuilder('u')
            ->select('u')
            ->where('u.roleUtilisateur IN (:roles)')
            ->orWhere('u IN (:Users)')
            ->setParameter('roles', $Role)
            ->setParameter('Users', $Users)
            // ->setParameter('UserInterdits', $UserInterdits)
            ->getQuery()
            ->getResult();
    }
//    
    // EmailUsers
    public function getUserByEmail($Mail)
    {
        return $this->createQueryBuilder('u')
            ->select('u')
            ->where('u.email = :Mail')
            ->setParameter('Mail', $Mail)
            ->getQuery()
            ->getOneOrNullResult();
    }

//      public function OntDroit($id) 
//    {
//        $em = $this->getEntityManager();
//        $Role = $em->getRepository('TimSoftGeneralBundle:DroitAccesGroupe')->getGroupeAutorises($id);
//        $Users =  $em->getRepository('TimSoftGeneralBundle:DroitAccesPersonne')->getPersonneExceptionnelle($id,1);
//        $UserInterdits = $em->getRepository('TimSoftGeneralBundle:DroitAccesPersonne')->getPersonneExceptionnelle($id,0);
//       
//        $query = $em->createQuery('SELECT u FROM TimSoftGeneralBundle:Utilisateur u WHERE u.roleUtilisateur IN (:roles) OR u IN (:Users) MINUS (:UserInterdits)')
//                      ->setParameter('roles', $Role)
//                      ->setParameter('Users', $Users)
//                      ->setParameter('UserInterdits', $UserInterdits);
//        $users = $query->getResult();
//        return $users;
//
//        
//    }
    public function getUsers($bu)
    {
        return $this->createQueryBuilder('u')
            ->select('u')
            // ->leftJoin('u.bus', 'b')
            ->where(':bu NOT MEMBER OF u.bus')
            ->setParameter('bu', $bu)
            ->getQuery()
            ->getResult();
    }

    public function findByBu($bus)
    {
        return $this->createQueryBuilder('u')
            ->select('u')
            // ->leftJoin('u.bus', 'b')
            ->where(':bu MEMBER OF u.bus')
            ->andWhere('u.roleUtilisateur NOT LIKE :role')
            ->andWhere('u.statutProfil = 1')
            ->setParameter('role', '%ROLE_CLIENT%')
            ->setParameter('bu', $bus)
            ->getQuery()
            ->getResult();
    }

    public function findNotInBu($bus)
    {
        return $this->createQueryBuilder('u')
            ->select('u')
            ->leftJoin('u.bus', 'b')
            ->where(':bu NOT MEMBER OF u.bus')
            ->andWhere('u.statutProfil = 1')
            ->setParameter('bu', $bus)
            ->getQuery()
            ->getResult();
    }

    public function findBySociete($societe)
    {
        return $this->createQueryBuilder('u')
            ->select('u')
//            ->leftJoin('u.client', 'client')
            ->where('u.client = :client')
            ->setParameter('client', $societe)
            ->getQuery()
            ->getResult();
    }

}
