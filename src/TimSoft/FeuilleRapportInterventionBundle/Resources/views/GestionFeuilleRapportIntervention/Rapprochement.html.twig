{% extends 'Squelette.html.twig' %}

{% block Titre %}
    Portail web de TimSoft - Les feuilles de présence & Rapport d'intervention
{% endblock %}

{% block Section %}
    <h1>
        Feuille de présence & Rapport d'intervention
        <small>Consultation</small>
    </h1>
{% endblock %}

{% block Navigation %}
    <li class="breadcrumb-item active">Consultation</li>
{% endblock %}
{% block SideBar %}
{% endblock %}
{% block Contenu %}
    <div class="col-md-12">
        <div class="card card-outline card-primary">
            {#            <div class="card-header with-border">#}
            {#                <h2 class="card-title" style="color:#1E5584">La liste des feuilles de présence & rapport#}
            {#                    d'intervention</h2>#}
            {#            </div>#}
            <div class="card-body">
                <div align="right">
                    <div class="input-group" style="width: 19%;">
                        <div class="input-group-prepend">
                            <span class="input-group-text"><i class="fa fa-calendar"></i></span>
                        </div>
                        <input type="text" name="daterange" class="daterange form-control"
                               placeholder="Filtre par date"/>
                    </div>
                </div>
                <table id="TableRIFP" class="table table-bordered table-striped dataTable">
                    <thead>
                    <tr>
                        <th id="Date">
                            Date
                        </th>
                        <th>
                            Client
                        </th>
                        <th>
                            Intervenant
                        </th>
                        <th>
                            Qté
                        </th>
                        <th>
                            N°CL (Vide <input type="checkbox" id="ncl">)
                        </th>
                        <th hidden>

                        </th>
                        <th>
                            Action
                        </th>
                    </tr>
                    </thead>
                </table>
            </div>
        </div>
    </div>

{% endblock %}
{% block css %}
    {{ parent() }}
    <link rel="stylesheet" href="https://cdn.datatables.net/responsive/2.2.3/css/responsive.dataTables.min.css"/>
    {#    <link rel="stylesheet" href="https://cdn.datatables.net/fixedcolumns/3.3.0/css/fixedColumns.dataTables.min.css"/>#}
    <link rel="stylesheet" type="text/css"
          href="https://cdn.datatables.net/v/dt/jszip-2.5.0/b-1.6.1/b-colvis-1.6.1/b-flash-1.6.1/b-html5-1.6.1/b-print-1.6.1/datatables.min.css"/>
    {#    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.1.3/css/bootstrap.css"/>#}
    <link rel="stylesheet" href="https://cdn.datatables.net/1.10.20/css/dataTables.bootstrap4.min.css"/>
    <link rel="stylesheet" href="https://cdn.datatables.net/buttons/1.6.1/css/buttons.bootstrap4.min.css"/>
    <style>
        #TableRIFP {

        }

        div .dt-buttons {
            display: block;
            float: none;
            padding-bottom: 20px
        }

        .dataTables_length {
            display: block;
        }

        .buttons-excel {
            display: inline-block;
            margin: 0px;
            width: 15%;
        }

        .width {
            width: 130px !important;
        }
    </style>
{% endblock %}
{% block script %}
    {{ parent() }}
    <script src="https://cdn.datatables.net/fixedcolumns/3.3.0/js/dataTables.fixedColumns.min.js"></script>
    <script src="https://cdn.datatables.net/responsive/2.2.3/js/dataTables.responsive.min.js"></script>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.36/pdfmake.min.js"></script>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.36/vfs_fonts.js"></script>
    <script type="text/javascript"
            src="https://cdn.datatables.net/v/dt/jszip-2.5.0/b-1.6.1/b-colvis-1.6.1/b-flash-1.6.1/b-html5-1.6.1/b-print-1.6.1/datatables.min.js"></script>
    <script type="text/javascript" src="https://cdn.jsdelivr.net/momentjs/latest/moment.min.js"></script>
    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.min.js"></script>
    <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.css"/>
    <link href="{{ asset('Template2/plugins/bootstrap4-editable/css/bootstrap-editable.css') }}" rel="stylesheet"/>
    <script src="{{ asset('Template2/plugins/bootstrap4-editable/js/bootstrap-editable.js') }}"></script>

    <script type="text/javascript">
        var startdate;
        var enddate;
        $.fn.editable.defaults.mode = 'inline';
        $.fn.dataTableExt.afnFiltering.push(
            function (oSettings, aData, iDataIndex) {
                if (typeof startdate === 'undefined' || typeof enddate === 'undefined') {
                    return true;
                }
                var coldate = moment(aData[3], 'DD-MM-YYYY');
                console.log('coldate', coldate);

                var valid = true;

                if (coldate.isValid()) {
                    if (enddate.isBefore(coldate)) {
                        console.log('enddate before coldate', enddate);
                        valid = false;
                    }

                    if (coldate.isBefore(startdate)) {
                        console.log('coldate before startdate', startdate);
                        valid = false;
                    }
                } else {
                    valid = false;
                }

                return valid;
            });
        $(document).ready(function () {
            $('input[type="checkbox"]').click(function () {
                if ($(this).prop("checked") == true) {
                    table
                        .columns(5)
                        .search('null')
                        .draw();
                } else if ($(this).prop("checked") == false) {
                    table
                        .columns(5)
                        .search('')
                        .draw();
                }
            });
            // $.fn.editable.defaults.mode = 'inline';

            // $("#select222" ).css('display', null);
            var table = $('#TableRIFP').DataTable({
                language: {
                    processing: "Traitement en cours...",
                    search: "Rechercher&nbsp;:",
                    lengthMenu: "Afficher _MENU_ &eacute;l&eacute;ments",
                    info: "Affichage de l'&eacute;lement _START_ &agrave; _END_ sur _TOTAL_ &eacute;l&eacute;ments",
                    infoEmpty: "Affichage de l'&eacute;lement 0 &agrave; 0 sur 0 &eacute;l&eacute;ments",
                    infoFiltered: "(filtr&eacute; de _MAX_ &eacute;l&eacute;ments au total)",
                    infoPostFix: "",
                    loadingRecords: "Chargement en cours...",
                    zeroRecords: "Aucun &eacute;l&eacute;ment &agrave; afficher",
                    emptyTable: "Aucune donnée disponible dans le tableau",
                    paginate: {
                        first: "Premier",
                        previous: "Précédent",
                        next: "Suivant",
                        last: "Dernier"
                    },
                    aria: {
                        sortAscending: ": activer pour trier la colonne par ordre croissant",
                        sortDescending: ": activer pour trier la colonne par ordre décroissant"
                    },
                    "processing": true,
                    "serverSide": true,
                    /*"ajax": "''"*/
                },
                // "scrollX": true,
                ajax: {
                    url: "{{ path('feuillesJson') }}",
                    type: "GET",
                    dataSrc: '',
                },
                "columns": [
                    {"data": "Date"},
                    {"data": "Client"},
                    {"data": "Intervenant"},
                    {"data": "Qte"},
                    {
                        "data": "numLivraison",
                        createdCell: function (td, cellData, rowData, row, col) {
                            $(td).addClass('rapp');
                        },
                        "render": function (data, type, row, meta) {
                            var html = ' <a href="#" class="username"\n' +
                                '                    data-type="text"\n' +
                                '                    data-pk="' + row.id + '"\n' +
                                '                    data-title="Enter username"\n' +
                                '                    data-value="' + row.numLivraison + '"\n' +
                                '                    data-tpl=\'\n' +
                                '                    <input name="somename" oninput="javascript: if (this.value.length > this.maxLength) this.value = this.value.slice(0, this.maxLength);"\n' +
                                '                    type = "number"\n' +
                                '                    maxlength = "8"\n' +
                                '                    min="10000000" />\'>\n' +
                                '                    <span class="badge bg-success" style="font-size: 85%">' + row.numLivraison + '</span></a>';
                            if (row.numLivraison) {
                                return html;
                            } else {
                                return ' <a href="#" class="username" data-type="text" data-pk="' + row.id + '"\n' +
                                    '                               data-title="Enter username"\n' +
                                    '                               data-value="' + row.numLivraison + '" data-tpl=\'\n' +
                                    '                    <input name="somename" oninput="javascript: if (this.value.length > this.maxLength) this.value = this.value.slice(0, this.maxLength);"\n' +
                                    '                    type = "number"\n' +
                                    '                    maxlength = "8"\n' +
                                    '                    min="10000000" />\'>\n' +
                                    '<span class="badge bg-danger" style="font-size: 85%">Faire le rapprochement</span></a>'
                            }
                        }
                    },
                    {
                        "data": null,
                        "render": function (data, type, row, meta) {
                            if (row.numLivraison) {
                                return row.numLivraison;
                            } else {
                                return 'null';
                            }
                        },
                        "visible": false,
                        "searchable": true,
                    },
                    {
                        "data": null,
                        "render": function (data, type, row, meta) {
                            var htmltoAdd = '';
                            {% if AutorisationAcces('ConsulterFeuillePresence' , app.user) %}
                            htmltoAdd += '<a class="btn btn-sm btn-default" href="' + Routing.generate('ConsulterFeuillePresence', {id: row.id}) + '" >' +
                                '                    <i class="fas fa-search fa-lg"\n' +
                                '                    title="Consulter la feuille de présence"></i>\n' +
                                '                    </a>';
                            {% endif %}
                            {% if AutorisationAcces('TelechargerFeuillePresence' , app.user) %}
                            htmltoAdd += ' <a class="btn btn-sm btn-primary"\n' +
                                '                    href="' + Routing.generate('TelechargerFeuillePresence', {id: row.id}) + '">\n' +
                                '                    <i class="fas fa-download fa-lg" title="Télécharger la feuille"></i>\n' +
                                '                    </a>';
                            {% endif %}
                            return htmltoAdd;
                        }
                    }
                ],
                "paging": true,
                "ordering": false,
                "lengthMenu": [[10, 25, 50, 100, -1], [10, 25, 50, 100, "Tous"]],
                dom: 'Bfrltip',
                buttons: [
                    {
                        extend: 'excel',
                        text: '<i class="fas fa-file-export"></i> Exporter en excel',
                        className: "btn btn-success",
                        exportOptions: {
                            columns: [0, 1, 2, 3, 5],
                            rows: ':visible'
                        },
                        init: function (api, node, config) {
                            $(node).removeClass('dt-button')
                        },
                        customize: function (xlsx) {
                            var sheet = xlsx.xl.worksheets['sheet1.xml'];

                            $('c[r=A2] t', sheet).text('Date');
                            $('c[r=B2] t', sheet).text('Client');
                            $('c[r=C2] t', sheet).text('Intervenant');
                            $('c[r=D2] t', sheet).text('Qte');
                            $('c[r=E2] t', sheet).text('N°CL');
                        }
                    },
                ],
                "columnDefs": [
                    {"width": "10%", "targets": 1}
                ],
                drawCallback: function () {
                    var api = this.api();
                    let data = api.rows({
                        filter: 'applied'
                    }).data();
                    $.each($(api.table().header()).find("select"), function (colIndex) {

                        var currData = data.map(function (cols) {
                            return cols[colIndex];
                        });
                        $.each($(this).find("option"), function () {
                            console.log(this);
                            if (currData.indexOf($(this).text()) != -1 || $(this).text() == '') {
                                // console.log('show');
                                $(this).show();
                            } else {
                                // console.log('show');
                                $(this).hide();
                            }
                        })
                    });
                },
                initComplete: function () {
                    let that = this;
                    var selectRapprochement;
                    that.api().columns().every(function (index) {
                        // if (index === 4) {
                        //     let column = this;
                        //     selectRapprochement = $('<select class="select2"><option value=""></option></select>')
                        //         .appendTo($(column.header()))
                        // }
                        // if (index === 5) {
                        //     selectRapprochement.on('change', function () {
                        //         var val = $.fn.dataTable.util.escapeRegex(
                        //             $(this).val()
                        //         );
                        //         table
                        //
                        //             .search( val ? '^' + val + '$' : '', true, false )
                        //             .draw();
                        //         // table
                        //         //     .search(val ? '^' + val + '$' : '', true, false)
                        //         //     .draw();
                        //     });
                        //     // console.log(this.data().unique());
                        //     // let column = this;
                        //     this.data().unique().sort().each(function (d, j) {
                        //         selectRapprochement.append('<option value="' + d + '">' + d + '</option>')
                        //     });
                        // }
                        if (index !== 4 && index !== 5 && index !== 6) {
                            if (index === 1) {
                                $("#Date select").hide();
                                // $("#Date").append('<span class="input-prepend input-group"><span class="add-on input-group-addon"><i class="glyphicon glyphicon-calendar fa fa-calendar"></i></span><input type="text" style="width: 100%" name="daterange" class="form-control daterange"/></span>');
                            }
                            let column = this;
                            var select = $('<select class="select2"><option value=""></option></select>')
                                .appendTo($(column.header()))
                                .on('change', function () {
                                    var val = $.fn.dataTable.util.escapeRegex(
                                        $(this).val()
                                    );

                                    column
                                        .search(val ? '^' + val + '$' : '', true, false)
                                        .draw();
                                });

                            column.data().unique().sort().each(function (d, j) {
                                select.append('<option value="' + d + '">' + d + '</option>')
                            });
                        }
                    });
                }
            });
// $('#TableRIFP').delegate('#select222', function () {
//     this.select2();
// })
// $.fn.dataTable.Editor.classes.form.button = "btn";

            $('.daterange').daterangepicker({
                "locale": {
                    "format": "MM/DD/YYYY",
                    "separator": " - ",
                    "applyLabel": "Appliquer",
                    "cancelLabel": "Annuler",
                    "fromLabel": "De",
                    "toLabel": "À",
                    "customRangeLabel": "Custom",
                    "daysOfWeek": [
                        "Di",
                        "Lu",
                        "Ma",
                        "Me",
                        "Je",
                        "Ve",
                        "Sa"
                    ],
                    "monthNames": [
                        "Janvier",
                        "Février",
                        "Mars",
                        "Avril",
                        "Mai",
                        "Juin",
                        "Juillet",
                        "Août",
                        "Septembre",
                        "Octobre",
                        "Novembre",
                        "Decembre"
                    ],
                    "firstDay": 1
                },
// ranges: {
//     "Today": [moment(), moment()],
//     'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
//     '7 last days': [moment().subtract(6, 'days'), moment()],
//     '30 last days': [moment().subtract(29, 'days'), moment()],
//     'This month': [moment().startOf('month'), moment().endOf('month')],
//     'Last month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')],
//     'Blank date': [moment("01-01-0001"), moment("01-01-0001")]
// },
                autoUpdateInput: false,
                opens: "left",
// locale: {
//     cancelLabel: 'Clear',
//     format: 'DD-MM-YYYY'
// }
            });
            var startDate;
            var endDate;
            var dataIdx = 0;  //current data column to work with
// $("#mytable_wrapper thead").on("mousedown", "th", function (event) {
//     var visIdx = $(this).parent().children().index($(this));
//     dataIdx = table.column.index('fromVisible', visIdx);
// });
// Function for converting a dd/mmm/yyyy date value into a numeric string for comparison (example 01-Dec-2010 becomes 20101201
            function parseDateValue(rawDate) {

                var d = moment(rawDate, "DD-MM-YYYY").format('DD-MM-YYYY');
                var dateArray = d.split("-");
                var parsedDate = dateArray[2] + dateArray[1] + dateArray[0];
                return parsedDate;
            }

//filter on daterange
            $(".daterange").on('apply.daterangepicker', function (ev, picker) {
                ev.preventDefault();
//if blank date option was selected
                if ((picker.startDate.format('DD-MM-YYYY') == "01-01-0001") && (picker.endDate.format('DD-MM-YYYY')) == "01-01-0001") {
                    $(this).val('Blank');


                    val = "^$";

                    table.column(dataIdx)
                        .search(val, true, false, true)
                        .draw();

                } else {
//set field value
                    $(this).val(picker.startDate.format('DD-MM-YYYY') + ' à ' + picker.endDate.format('DD-MM-YYYY'));

//run date filter
                    startDate = picker.startDate.format('DD-MM-YYYY');
                    endDate = picker.endDate.format('DD-MM-YYYY');

                    var dateStart = parseDateValue(startDate);
                    var dateEnd = parseDateValue(endDate);
                    console.log(dateStart);
                    console.log(dateEnd);
                    console.log(dataIdx);
                    var filteredData = table
                        .column(dataIdx)
                        .data()
                        .filter(function (value, index) {

                            var evalDate = value === "" ? 0 : parseDateValue(value);
                            if ((isNaN(dateStart) && isNaN(dateEnd)) || (evalDate >= dateStart && evalDate <= dateEnd)) {

                                return true;
                            }
                            return false;
                        });


                    var val = "";
                    for (var count = 0; count < filteredData.length; count++) {

                        val += filteredData[count] + "|";
                    }

                    val = val.slice(0, -1);


                    table.column(dataIdx)
                        .search(val ? "^" + val + "$" : "^" + "-" + "$", true, false, true)
                        .draw();
                }


            });


            $(".daterange").on('cancel.daterangepicker', function (ev, picker) {
                ev.preventDefault();
                $(this).val('');
                table.column(dataIdx)
                    .search("")
                    .draw();
            });

            $('#TableRIFP').editable({
                selector: 'tr td:nth-child(5) a',
                url: '{{ path('rapprochementAjout') }}',
                inputclass: 'form-control-sm width',
                success: function (data, newValue) {
                    if (data === "NumExist") {
                        Swal.fire({
                            title: 'Avertissement!',
                            text: 'N° LC: ' + newValue + ' existe déjà',
                            icon: 'warning',
                            confirmButtonText: 'Ok'
                        });
                    }
                    console.log(data);
                },
                error: function (response, newValue) {
                    if (response.status === 400) {
                        Swal.fire({
                            title: 'Erreur!',
                            text: 'N° LC: ' + newValue + ' existe déjà',
                            icon: 'error',
                            confirmButtonText: 'Ok'
                        });
                        // alert('N° LC ' + newValue + ' existe déjà')
                    }
                },
            });
        });
    </script>
{% endblock %}
