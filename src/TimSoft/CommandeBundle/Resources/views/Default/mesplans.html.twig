{% extends 'Squelette.html.twig' %}

{% block Titre %}
    Portail web de TimSoft - Mon Planning
{% endblock %}

{% block Section %}
    <h1>
        Consulter Mon Planning
        <small></small>
    </h1>
{% endblock %}


{% block Navigation %}
    <li class="breadcrumb-item active">Mon Planning</li>
{% endblock %}
{% block SideBar %}
{% endblock %}
{% block css %}
    {{ parent() }}
{% endblock %}
{% block Contenu %}

    <script src="https://unpkg.com/@fullcalendar/core@4.3.1/locales-all.js"></script>

    <style>
        .fc-day-grid-event > .fc-content {
            white-space: normal;
        }

        .fc-event {
            /* force events to be one-line tall */
            white-space: normal !important;
            overflow: hidden;
        }

        /*.fc-event {*/
        /*height: 60px !important;*/
        /*}*/
    </style>

    <div class="col-md-12">
        <div class="card card-outline card-primary">
            <div class="card-header with-border">
                <h3 class="card-title">
                    {% if (AutorisationAcces('taskevent_new' , Utilisateur)) %}
                        <a href="#" id="addTaskButton">
                            <button class="btn btn-primary">Ajouter une Task</button>
                        </a>
                    {% endif %}
                </h3>

                <div class="card-tools">
                    <a href="#" id="export" class="btn btn-info btn-sm"
                       title="Télécharger le planning">
                        <i class="fas fa-download fa-2x"></i>
                    </a>
                </div>
            </div>
            <div class="card-body">
                <div id='calendar'></div>
            </div>
        </div>
    </div>
{% endblock %}
    {% block script %}
        {{ parent() }}
        <script>
            $('.printBtn').on('click', function () {
                window.print();
            });

            document.addEventListener('DOMContentLoaded', function () {
                var app_user = {{ app.user.roleUtilisateur|json_encode()|raw }};
                var client;
                var initialLocaleCode = 'fr';
                var Calendar = FullCalendar.Calendar;
                var calendarEl = document.getElementById('calendar');

                var calendar = new Calendar(calendarEl, {
                    draggable: true,
                    theme: true,
                    defaultView: 'dayGridWeek',
                    locale: initialLocaleCode,
                    firstDay: 0,
                    timeZone: 'local',
                    plugins: ['interaction', 'dayGrid', 'timeGrid', 'dayGrid', 'bootstrap', 'rrule'],
                    header: {
                        left: 'prev,next today',
                        center: 'title',
                        right: 'dayGridMonth,dayGridWeek,timeGridDay'
                    },
                    editable: false,
                    eventDurationEditable: false,
                    eventLimit: true, // when too many events in a day, show the popover
                    eventSources: [
                        '{{ path('list', {'user' : app.user.id }) }}',
                        '{{ path('taskevent_by_user',{'id': app.user.id}) }}',
                        {
                            events: [ // put the array in the `events` property
                                {
                                    title: 'TEST #2 my recurring event',
                                    rrule: {
                                        freq: 'monthly',
                                        interval: 1,
                                        // byweekday: [  'fr' ],
                                        dtstart: '2019-11-11T00:00:00',
                                        until: '2029-06-01'
                                    },
                                    allDay: true
                                }
                            ],
                            color: 'black',     // an option!
                            textColor: 'yellow' // an option!
                        }
                    ],

                    themeSystem: 'themeSystem',
                    minTime: '08:30:00',
                    maxTime: '18:30:00',
                    allDay: true,
                    forceEventDuration: true,
                    eventClick: function (event) {
                        if (event.event.extendedProps.type != 'TaskEvent') {
                            editPlanningModal(event, calendar);
                        } else {
                            editTaskEvent(event, calendar);
                        }
                    },
                    eventResize: function (event) {
                        console.log(event.event.end);
                        var xhr = $.ajax({
                            url: '{{ path('appBundle_resize') }}',
                            data: 'action=update&title=' + event.event.title + '&start=' + GetNow(event.event.start) + '&end=' + GetNow(event.event.end) + '&id=' + event.event.id + '&all_day=' + event.event.allDay,
                            type: "POST",
                            // async: false,
                            success: function (data) {
                                calendar.refetchEvents();
                                f();
                            },
                            error: function () {
                                calendar.refetchEvents();
                                alert("Vous ne pouvez pas faire cette action");
                            },
                        });
                    },
                    eventTimeFormat: { // like '14:30:00'
                        hour: '2-digit',
                        minute: '2-digit',
                        second: '2-digit',
                        hour12: false

                    },
                    navLinks: true,
                    displayEventTime: false,
                    eventDataTransform: function (event) {
                        if (event.allDay) {
                            event.end = moment(event.end).add(1, 'day').format('YYYY-MM-DD');
                        }
                        return event;
                    },
                    eventRender: function (event, element, view) {
                        if (event.view.type === 'dayGridWeek') {
                            calendar.height = 450;
                            $(event.el).height('auto');
                            $(event.el).find('.fc-title').prepend('<b>Client: </b>');
                            if (event.event.extendedProps.type === 'TaskEvent') {
                                $(event.el).append('<b>Task:</b> ' + event.event.extendedProps.libelle);

                                if (!event.event.allDay) {
                                    $(event.el).append('<div><b>Heure: </b>' + moment(event.event.start).format("HH:mm") + '</div>');
                                }
                                if (event.event.extendedProps.etiquette == 'Urgent') {
                                    $(event.el).append('<div><b>Etiquette: </b> <span class="badge bg-danger">' + event.event.extendedProps.etiquette + '</span></div>');
                                } else if (event.event.extendedProps.etiquette == 'Peu') {
                                    $(event.el).append('<div><b>Etiquette: </b> <span class="badge bg-light">' + event.event.extendedProps.etiquette + '</span></div>');
                                } else if (event.event.extendedProps.etiquette == 'Moyen') {
                                    $(event.el).append('<div><b>Etiquette: </b> <span class="badge bg-indigo">' + event.event.extendedProps.etiquette + '</span></div>');
                                } else if (event.event.extendedProps.etiquette == 'Important') {
                                    $(event.el).append('<div><b>Etiquette: </b> <span class="badge bg-warning">' + event.event.extendedProps.etiquette + '</span></div>');
                                }
                                $(event.el).append('<div class="ribbon-wrapper"><div class="ribbon">' + event.event.extendedProps.Statut + '</div></div>');
                                if (event.event.extendedProps.Statut === 'To DO') {
                                    $(event.el).find('div.ribbon').each(function (index) {
                                        $(this).addClass('bg-warning');
                                        $(this).css('font-size', '80%');

                                    });
                                } else if (event.event.extendedProps.Statut === 'Bloqué') {
                                    $(event.el).find('div.ribbon').each(function (index) {
                                        $(this).addClass('bg-danger');
                                        // $(this).css('font-size', '0.6vw');

                                    });
                                } else if (event.event.extendedProps.Statut === 'In Progress') {
                                    $(event.el).find('div.ribbon').each(function (index) {
                                        $(this).addClass('bg-navy');
                                        $(this).css('font-size', '0.6vw');

                                    });
                                } else if (event.event.extendedProps.Statut === 'Done') {
                                    $(event.el).find('div.ribbon').each(function (index) {
                                        $(this).addClass('bg-success');
                                        // $(this).css('font-size', '0.6vw');
                                    });
                                }
                            } else {
                                $(event.el).append('<b>Libellé:</b> ' + event.event.extendedProps.libelle +
                                    '<br><b>Lieu: </b>' + event.event.extendedProps.Lieu);

                                if (event.event.allDay === false) {
                                    if (moment(event.event.start).hours() > 13) {
                                        $(event.el).append('<br><b>Après-midi</b>');
                                    } else {
                                        $(event.el).append('<br><b>Matin</b>');
                                    }
                                }
                            }
                        } else if (event.view.type === 'dayGridMonth' && event.event.allDay) {
                            $(event.el).height('auto');
                            $(event.el).append(event.event.extendedProps.libelle);
                            if (event.event.extendedProps.type === 'TaskEvent') {
                                $(event.el).find('.fc-content').css('width', '90%');
                                $(event.el).append('<div class="ribbon-wrapper"><div class="ribbon">' + event.event.extendedProps.etiquette + '</div></div>');
                                if (event.event.extendedProps.etiquette === 'Important') {
                                    $(event.el).find('div.ribbon').each(function (index) {

                                        $(this).addClass('bg-warning');
                                        $(this).css('font-size', '70%');

                                    });
                                } else if (event.event.extendedProps.etiquette === 'Urgent') {
                                    $(event.el).find('div.ribbon').each(function (index) {
                                        $(this).addClass('bg-danger');

                                    });
                                } else if (event.event.extendedProps.etiquette === 'Moyen') {
                                    $(event.el).find('div.ribbon').each(function (index) {
                                        $(this).addClass('bg-info');

                                    });
                                } else if (event.event.extendedProps.etiquette === 'Peu') {
                                    $(event.el).find('div.ribbon').each(function (index) {
                                        $(this).addClass('bg-light');

                                    });
                                }
                            }
                        }
                    },
                });
                calendar.setOption('locale', 'fr');
                calendar.render();

                $("#export").click(function (e) {

                    e.preventDefault();
                    var exportation = [];
                    var events = calendar.getEvents();
                    var userId = {{ app.user.id }};
                    $.each(events, function (key, event) {

                        var resourceIds = event.extendedProps.resourceIds;
                        if (userId === resourceIds[0] && event.extendedProps.type !== 'TaskEvent') {
                            if ((calendar.view.currentStart <= event.start) && (calendar.view.currentEnd > event.start)) {
                                exportation.push(event.id);
                                console.log(event);
                            }
                        }
                    });
                    $.ajax({
                        type: "GET",
                        url: '{{ path('telechargementPlanning') }}',
                        data: {
                            ids: exportation,
                            start: moment(calendar.view.currentStart).format('MM/DD/YYYY'),
                            end: moment(calendar.view.currentEnd).subtract(1, 'days').format('MM/DD/YYYY'),
                        },
                        success: function (data) {
                            window.location = this.url;
                            Swal.fire({
                                position: 'center',
                                icon: 'success',
                                title: 'Votre fichier est en cours de téléchargement!',
                                showConfirmButton: false,
                                timer: 2500
                            })
                        },
                        error: function () {
                            Swal.fire({
                                icon: 'error',
                                title: 'Oops...',
                                text: 'Quelque chose c\'est mal passé. Merci d\'essayer plus tard',
                            })
                        }
                    });
                });

                $('#addTaskButton').on('click', function (e) {
                    e.preventDefault();
                    $.ajax({
                        url: '{{ path('taskevent_new') }}',
                        method: 'post',
                        // dataType: 'json',
                        success: function (data) {
                            $('#renderEdit').html(data);
                            $('#addTask').modal();
                            $('form[name="new"]').on('submit', function () {
                                calendar.refetchEvents();
                            });
                            $('form[name="new"] #timsoft_tasksbundle_taskevent_utilisateur').val({{ app.user.id }}); // Select the option with a value of '1'
                            $('form[name="new"] #timsoft_tasksbundle_taskevent_utilisateur').trigger('change'); // Notify any JS components that the value changed
                        },
                    });
                });

            });

            function formatDate(date) {
                var d = new Date(date),
                    month = '' + (d.getMonth() + 1),
                    day = '' + d.getDate(),
                    year = d.getFullYear();

                if (month.length < 2)
                    month = '0' + month;
                if (day.length < 2)
                    day = '0' + day;

                return [year, month, day].join('-');
            }

            function GetNow(currentdate) {
                var cc = currentdate.getFullYear() + "-"
                    + (currentdate.getMonth() + 1) + "-"
                    + currentdate.getDate() + " "
                    + currentdate.getHours() + ":"
                    + currentdate.getMinutes() + ":"
                    + currentdate.getSeconds();
                return cc;
            }
        </script>
    {% endblock %}
