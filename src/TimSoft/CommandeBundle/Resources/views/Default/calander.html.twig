{% extends 'Squelette.html.twig' %}

{% block Titre %}
    Portail web de TimSoft - Gestion des Plannings
{% endblock %}

{% block Section %}
    <h1>
        Gestion des Plannings
        <small>Planifications</small>
    </h1>
{% endblock %}
{% block Navigation %}
    <li class="breadcrumb-item active">Planifications</li>
{% endblock %}
{% block SideBar %}

{% endblock %}
{% block css %}
    {{ parent() }}
    <style>
        .fc-day-grid-event > .fc-content {
            white-space: normal;
        }

        .fc-event {
            /* force events to be one-line tall */
            white-space: normal !important;
            overflow: hidden;
            cursor: pointer;
        }

        /*#external-events {*/
        /*    !*position: fixed;*!*/
        /*    z-index: 2;*/
        /*    top: 20px;*/
        /*    left: 20px;*/
        /*    !*width: 150px;*!*/
        /*    padding: 0 10px;*/
        /*    border: 1px solid #ccc;*/
        /*    !*background: #eee;*!*/
        /*    margin-top: 90px;*/
        /*    !*padding-right: 90px;*!*/
        /*}*/

        #external-events .fc-event {
            /*margin: 1em 0;*/
            cursor: move;
        }

        #calendar-container {
            position: relative;
            z-index: 1;
            /*margin-left: 200px;*/
        }

        /*#calendar {*/
        /*    max-width: 900px;*/
        /*    margin: 20px auto;*/
        /*}*/
    </style>
{% endblock %}
{% block Contenu %}
    <div class="col-lg-12">
        <div class="row">
            <div class="col-md-3">
                <div class="card card-primary">
                    <div class="card-header">
                        <strong>Les lignes de commande</strong>
                    </div>
                    <div class="card-body">
                        <div id='external-events'>
                            {% set jours = 0 %}
                            {% for lcs in lc %}
                                <div class='fc-event external-event bg-primary ui-draggable ui-draggable-handle'
                                     id="{{ lcs.id }}">{{ lcs.libelle }}</div>
                                <div>{{ lcs.qteRestante }} Jour(s)</div>
                                <div id="{{ lcs.id }}" class="cc"></div>
                            {% endfor %}
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-9">
                <div class="card card-warning">
                    <div class="card-header">
                        <div class="card-title"><strong>Calendrier</strong></div>
                        <div class="card-tools"><strong>à {{ cc }}</strong></div>
                    </div>
                    <div class="card-body p-0">
                        <div id='calendar'></div>
                    </div>
                </div>
            </div>
        </div>
        <br><br><br>
    </div>
    <div class="modal fade" id="confirm-modif" tabindex="-1" role="dialog" aria-labelledby="myModalLabel"
         aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    Confirmation de l'ajout d'un jour supplémentaire
                </div>
                <div class="modal-body">
                    RAL épuisé, Souhaitez-vous ajouter des journées supplémentaires ?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Non</button>
                    <a class="btn btn-primary btn-ok" data-dismiss="modal">Oui</a>
                </div>
            </div>
        </div>
    </div>
{% endblock %}
    {% block script %}
        {{ parent() }}
        <script src="https://unpkg.com/@fullcalendar/core@4.3.1/locales-all.js"></script>
        <script src='https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.24.0/moment.js'></script>
        <script>
            function f() {
                $.map($(".fc-event"), function (n, i) {
                    if (n.id) {
                        $.ajax({
                            url: '{{ path('calcul') }}',
                            data: 'action=update&id=' + n.id,
                            type: "GET",
                            //  async: false,
                            success: function (data) {
                                console.log(data);
                                $('#' + n.id + '.cc').text(data + " Jours Restants");
                            },
                            error: function () {
                                alert("erreur lors de l'appel de l'url dans POST event/drop : contactez l'administrateur du site");
                            },
                        });
                    }
                });
            }

            document.addEventListener('DOMContentLoaded', function () {
                    f();
                    var app_user = {{ app.user.roleUtilisateur|json_encode()|raw }};
                    var client;

                    var initialLocaleCode = 'fr';
                    var Calendar = FullCalendar.Calendar;
                    var Draggable = FullCalendarInteraction.Draggable;
                    var containerEl = document.getElementById('external-events');
                    var calendarEl = document.getElementById('calendar');
                    // initialize the external events
                    // -----------------------------------------------------------------
                    new Draggable(containerEl, {
                        itemSelector: '.fc-event',
                    });
                    var calendar = new Calendar(calendarEl, {
                        draggable: true,
                        theme: true,
                        defaultView: 'dayGridWeek',
                        locale: initialLocaleCode,
                        firstDay: 0,
                        timeZone: 'local',
                        plugins: ['interaction', 'dayGrid', 'timeGrid', 'bootstrap'],
                        header: {
                            left: 'prev,next today',
                            center: 'title',
                            right: 'dayGridMonth,dayGridWeek,timeGridDay'
                        },
                        editable: false,
                        eventLimit: true, // when too many events in a day, show the popover
                        eventSources: [

                            '{{ path('list', {'user' : cc.id } ) }}',
                            '{{ path('taskevent_by_user',{'id': cc.id}) }}'

                        ],
                        minTime: '08:30:00',
                        maxTime: '18:30:00',
                        displayEventTime: false,
                        allDay: true,
                        themeSystem: 'themeSystem',
                        eventDrop: function (event) {
                            var start = new Date(event.event.start);
                            var end = new Date(event.event.end);
                            console.log(event);
                            var xhr = $.ajax({
                                url: '{{ path('appBundle_drop') }}',
                                data: 'action=update&title=' + event.event.title + '&start=' + GetNow(event.event.start) + '&end=' + GetNow(event.event.end) + '&id=' + event.event.id + '&all_day=' + event.event.allDay
                                    + '&User=' + null,
                                type: "POST",
                                success: function (data) {
                                    f()
                                },
                                error: function () {
                                    calendar.refetchEvents();
                                    alert("erreur lors de l'appel de l'url dans POST event/drop : contactez l'administrateur du site");
                                },
                            });
                        },
                        forceEventDuration: true,
                        eventDataTransform: function (event) {
                            if (event.allDay) {
                                event.end = moment(event.end).add(1, 'days')
                            }
                            return event;
                        },
                        eventClick: function (event) {
                            if (event.event.extendedProps.type != 'TaskEvent') {
                                editPlanningModal(event, calendar);
                            } else {
                                editTaskEvent(event, calendar);
                            }
                        },
                        eventResize: function (event) {
                            console.log(event.event.end);
                            var xhr = $.ajax({
                                url: '{{ path('appBundle_resize') }}',
                                data: 'action=update&title=' + event.event.title + '&start=' + GetNow(event.event.start) + '&end=' + GetNow(event.event.end) + '&id=' + event.event.id + '&all_day=' + event.event.allDay,
                                type: "POST",
                                // async: false,
                                success: function (data) {
                                    calendar.refetchEvents();
                                    f();
                                },
                                error: function () {
                                    calendar.refetchEvents();
                                    f();
                                    alert("Vous ne pouvez pas faire cette action");
                                },
                            });
                        },
                        eventTimeFormat: { // like '14:30:00'
                            hour: '2-digit',
                            minute: '2-digit',
                            second: '2-digit',
                            hour12: false

                        },
                        navLinks: true,
                        eventRender: function (event, element) {
                            if (event.view.type === 'dayGridWeek') {
                                calendar.height = 450;
                                $(event.el).height('auto');
                                if (event.event.extendedProps.type == 'TaskEvent') {
                                    $(event.el).find('.fc-title').prepend('<b>Client: </b>');
                                    $(event.el).append('<b>Task: </b> ' + event.event.extendedProps.task +
                                        '<br><b>Intervenant: </b>' + event.event.extendedProps.Intervenant);
                                    if (event.event.allDay === false) {
                                        $(event.el).append('<div><b>Heure: </b>' + moment(event.event.start).format("HH:mm") + '</div>');
                                    }
                                    if (event.event.extendedProps.etiquette == 'Urgent') {
                                        $(event.el).append('<div><b>Etiquette: </b> <span class="badge bg-danger">' + event.event.extendedProps.etiquette + '</span></div>');
                                    } else if (event.event.extendedProps.etiquette == 'Peu') {
                                        $(event.el).append('<div><b>Etiquette: </b> <span class="badge bg-light">' + event.event.extendedProps.etiquette + '</span></div>');
                                    } else if (event.event.extendedProps.etiquette == 'Moyen') {
                                        $(event.el).append('<div><b>Etiquette: </b> <span class="badge bg-indigo">' + event.event.extendedProps.etiquette + '</span></div>');
                                    } else if (event.event.extendedProps.etiquette == 'Important') {
                                        $(event.el).append('<div><b>Etiquette: </b> <span class="badge bg-warning">' + event.event.extendedProps.etiquette + '</span></div>');
                                    }
                                    $(event.el).append('<div class="ribbon-wrapper"><div class="ribbon">' + event.event.extendedProps.Statut + '</div></div>');
                                    if (event.event.extendedProps.Statut === 'To DO') {
                                        $(event.el).find('div.ribbon').each(function (index) {
                                            $(this).addClass('bg-warning');
                                            $(this).css('font-size', '80%');

                                        });
                                    } else if (event.event.extendedProps.Statut === 'Bloqué') {
                                        $(event.el).find('div.ribbon').each(function (index) {
                                            $(this).addClass('bg-danger');
                                            // $(this).css('font-size', '0.6vw');

                                        });
                                    } else if (event.event.extendedProps.Statut === 'In Progress') {
                                        $(event.el).find('div.ribbon').each(function (index) {
                                            $(this).addClass('bg-navy');
                                            $(this).css('font-size', '0.6vw');

                                        });
                                    } else if (event.event.extendedProps.Statut === 'Done') {
                                        $(event.el).find('div.ribbon').each(function (index) {
                                            $(this).addClass('bg-success');
                                            // $(this).css('font-size', '0.6vw');

                                        });
                                    }


                                } else {
                                    $(event.el).find('.fc-title').prepend('<b>Client: </b>');
                                    // $('<b>Client: </b>').prependTo(event.el);
                                    $(event.el).append('<b>Libellé:</b> ' + event.event.extendedProps.libelle);
                                    if (event.event.allDay === false) {
                                        if (moment(event.event.start).hours() > 13) {
                                            $(event.el).append('<br><b>Après-midi</b>');
                                        } else {
                                            $(event.el).append('<br><b>Matin</b>');
                                        }
                                    }
                                }
                            } else if (event.view.type === 'dayGridMonth' && event.event.allDay) {
                                $(event.el).height('50');
                                $(event.el).append(event.event.extendedProps.libelle);
                            }
                        },
                        drop: function (event) {
                            var x = $('#' + event.draggedEl.id + '.cc').text();
                            var updatedString = x.replace("Jours Restants", "");
                            if (updatedString <= 0) {
                                {% if AutorisationAcces('JourneSupplementaire' , app.user) %}
                                $("#confirm-modif").modal();
                                $(".btn-ok").one("click", function () {
                                    $.ajax({
                                        url: '{{ path('appBundle_add') }}',
                                        data: 'action=update&title=' + event.draggedEl.innerText.toString() + '&start=' + event.dateStr + '&end=' + event.dateStr + '&id=' + event.id + '&all_day=' + event.allDay + '&idUser=' + {{ cc.id }} +'&lc=' + event.draggedEl.id
                                            + '&JSup=' + true,
                                        type: "POST",
                                        success: function (data) {
                                            calendar.refetchEvents();
                                            editPlanningModal(event, calendar, data);
                                            f();
                                        },
                                        error: function () {
                                            alert("Vous ne pouvez pas faire cette action");
                                        },
                                    });
                                });
                                {% else %}
                                alert("RAL épuisé, Vous ne pouvez pas faire cette action");
                                {% endif %}
                            } else {
                                var xhr = $.ajax({
                                    url: '{{ path('appBundle_add') }}',
                                    data: 'action=update&title=' + event.draggedEl.innerText.toString() + '&start=' + event.dateStr + '&end=' + event.dateStr + '&id=' + event.id + '&all_day=' + event.allDay + '&idUser=' + {{ cc.id }} +'&lc=' + event.draggedEl.id,
                                    type: "POST",
                                    //  async: false,
                                    success: function (data) {
                                        editPlanningModal(event, calendar, data);
                                        calendar.refetchEvents();
                                        f();
                                    },
                                    error: function () {
                                        alert("Vous ne pouvez pas faire cette action");
                                    },
                                });

                            }
                        },
                    });
                    calendar.setOption('locale', 'fr');
                    calendar.render();
                }
            );

            function formatDate(date) {
                var d = new Date(date),
                    month = '' + (d.getMonth() + 1),
                    day = '' + d.getDate(),
                    year = d.getFullYear();

                if (month.length < 2)
                    month = '0' + month;
                if (day.length < 2)
                    day = '0' + day;

                return [year, month, day].join('-');
            }

            function GetNow(currentdate) {
                var cc = currentdate.getFullYear() + "-"
                    + (currentdate.getMonth() + 1) + "-"
                    + currentdate.getDate() + " "
                    + currentdate.getHours() + ":"
                    + currentdate.getMinutes() + ":"
                    + currentdate.getSeconds();
                return cc;
            }
        </script>
    {% endblock %}
