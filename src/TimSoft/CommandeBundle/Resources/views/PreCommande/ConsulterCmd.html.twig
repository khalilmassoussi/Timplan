{% extends 'Squelette.html.twig' %}

{% block Titre %}
    Timplan - Les précommandes
{% endblock %}

{% block Section %}
    Gestion des Précommandes
{% endblock %}

{% block Navigation %}
    <li class="breadcrumb-item active">Consulter la liste des précommandes</li>
{% endblock %}
{% block SideBar %}
{% endblock %}
{% block Contenu %}

    <div class="col-md-12">
        <div class="card card-primary card-outline">
            <div class="card-header with-border">
                <h2 class="card-title">Liste de toutes les précommandes </h2>
            </div>
            <div class="card-body">
                <div class="col-md-6 offset-md-3">
                    <div class="card card-warning card-outline  bg-gradient-light">
                        <div class="card-body">
                            <div class="container">
                                <div class="row justify-content-center">
                                    <div class="mb-1">
                                        <button class="btn btn-info" id="plus">Afficher toutes les précommandes</button>
                                    </div>
                                </div>
                                <div class="row justify-content-center">
                                    <div class="btn-group">
                                        {% if AutorisationAcces('preCommandeImport' , Utilisateur) %}
                                            <a href="{{ path('preCommandeImport') }}" class="btn btn-success">
                                                <i class="fas fa-file-upload fa-2x"
                                                   title="Importer des précommandes"></i>
                                            </a>
                                        {% endif %}
                                        <a href="{{ path('timsoft_commande_precommande_export') }}"
                                           class="btn btn-secondary">
                                            <i class="fas fa-file-download fa-2x"
                                               title="Exporter les précommandess"></i>
                                        </a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <table id="TableClient" class="table table-striped dataTable table-responsive" style="width:100%"
                       cellspacing="0">
                    <thead>
                    <tr>
                        <th>
                            N° PréCC
                        </th>
                        <th id="Date">
                            <div id="dates" style="display:inline;"></div>
                        </th>
                        <th>
                            Client
                        </th>
                        <th>
                            Bu
                        </th>
                        <th id="rap">
                            RAP
                        </th>
                        <th>Business Manager</th>
                        <th>
                            N° Commande
                        </th>
                        <th>Affaire</th>
                        <th hidden></th>
                        <th hidden>

                        </th>
                    </tr>
                    </thead>
                    <tbody>
                    {% for cmd in commandes %}
                        <tr>
                            <td>
                                {{ cmd.nCommande }}
                            </td>
                            <td>
                                {{ cmd.datePiece| date('d-m-Y') }}
                            </td>
                            <td>
                                {% if cmd.client %}
                                    {{ cmd.client.raisonSociale }}
                                {% endif %}
                            </td>
                            <td>
                                {% set unique = cmd.lignCommandes %}
                                {% set newArray = [] %}

                                {% for lc in cmd.lignCommandes %}
                                    {% if lc.bu not in newArray %}
                                        {% set newArray = newArray|merge([lc.bu]) %}
                                    {% endif %}
                                {% endfor %}
                                {% for bu in newArray %}
                                    {{ bu }}
                                {% endfor %}

                            </td>
                            <td>
                                {{ cmd.totalRAP }}
                            </td>
                            <td>
                                {% if cmd.buManager %}{{ cmd.buManager }}  {% endif %}
                            </td>
                            <td>
                                {% if cmd.archive %}
                                    {% if cmd.commande %}
                                        <span class="badge bg-success"
                                              style="font-size: 85%">{{ cmd.commande.nCommande }}</span>
                                    {% else %}
                                        <span class="badge bg-success"
                                              style="font-size: 85%">Commande Généré</span>
                                    {% endif %}
                                {% else %}
                                    <span class="badge bg-danger" style="font-size: 85%">Non généré</span>
                                {% endif %}
                            </td>
                            <td>
                                {% if cmd.affaire %}
                                    {{ cmd.affaire.libelle }}
                                {% endif %}
                            </td>
                            <td hidden>
                                {% if cmd.archive %}
                                    Commande Généré
                                {% else %}
                                    Nongénéré
                                {% endif %}
                            </td>
                            <td>
                                {% if AutorisationAcces('preCommandeAfficher' , Utilisateur) %}
                                    <center>
                                        <a href="{{ path('preCommandeAfficher', { 'id': cmd.id }) }}"
                                           class="btn btn-sm btn-primary">
                                            <i class="fas fa-search fa-lg" title="Consulter la précommande"></i>
                                        </a>
                                    </center>
                                {% endif %}
                            </td>
                        </tr>
                    {% endfor %}
                    </tbody>
                </table>
                <br>
            </div>
        </div>
        <br><br>
    </div>
{% endblock %}
{% block css %}
    {{ parent() }}
{% endblock %}
{% block script %}
    {{ parent() }}
    <script src="https://cdn.datatables.net/responsive/2.2.3/js/dataTables.responsive.min.js"></script>
    <script type="text/javascript" src="https://cdn.jsdelivr.net/momentjs/latest/moment.min.js"></script>
    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.min.js"></script>
    <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.css"/>

    <script type="text/javascript">
        var startdate;
        var enddate;

        $.fn.dataTableExt.afnFiltering.push(
            function (oSettings, aData, iDataIndex) {
                if (typeof startdate === 'undefined' || typeof enddate === 'undefined') {
                    return true;
                }
                var coldate = moment(aData[3], 'DD-MM-YYYY');
                console.log('coldate', coldate);

                var valid = true;

                if (coldate.isValid()) {
                    if (enddate.isBefore(coldate)) {
                        console.log('enddate before coldate', enddate);
                        valid = false;
                    }

                    if (coldate.isBefore(startdate)) {
                        console.log('coldate before startdate', startdate);
                        valid = false;
                    }
                } else {
                    valid = false;
                }

                return valid;
            });
        $(document).ready(function () {


            var table = $('#TableClient').DataTable({
                language: {
                    processing: "Traitement en cours...",
                    search: "Rechercher&nbsp;:",
                    lengthMenu: "Afficher _MENU_ &eacute;l&eacute;ments",
                    info: "Affichage de l'&eacute;lement _START_ &agrave; _END_ sur _TOTAL_ &eacute;l&eacute;ments",
                    infoEmpty: "Affichage de l'&eacute;lement 0 &agrave; 0 sur 0 &eacute;l&eacute;ments",
                    infoFiltered: "(filtr&eacute; de _MAX_ &eacute;l&eacute;ments au total)",
                    infoPostFix: "",
                    loadingRecords: "Chargement en cours...",
                    zeroRecords: "Aucun &eacute;l&eacute;ment &agrave; afficher",
                    emptyTable: "Aucune donnée disponible dans le tableau",
                    paginate: {
                        first: "Premier",
                        previous: "Précédent",
                        next: "Suivant",
                        last: "Dernier"
                    },
                    aria: {
                        sortAscending: ": activer pour trier la colonne par ordre croissant",
                        sortDescending: ": activer pour trier la colonne par ordre décroissant"
                    },
                    "processing": true,
                    "serverSide": true,
                    /*"ajax": "''"*/
                },
                // ordering: false,
                responsive: true,
                drawCallback: function () {
                    var api = this.api();
                    let data = api.rows({
                        filter: 'applied'
                    }).data();
                    $.each($(api.table().header()).find("select"), function (colIndex) {
                        if (colIndex !== 6) {
                            var currData = data.map(function (cols) {
                                return cols[colIndex];
                            });
                            $.each($(this).find("option"), function () {
                                if (currData.indexOf($(this).text()) != -1 || $(this).text() == '')
                                    $(this).show();
                                else
                                    $(this).hide();
                            })
                        }
                    });
                },
                initComplete: function () {
                    let that = this;
                    that.api().columns().every(function (index) {
                        let column = this;
                        var select = $('<select class="form-control"><option value=""></option></select>')
                            .appendTo($(column.header()))
                            .on('change', function () {
                                var val = $.fn.dataTable.util.escapeRegex(
                                    $(this).val().replace("-", " ")
                                );
                                column
                                    .search(val ? '^' + val + '$' : '', true, false)
                                    .draw();
                            });
                        if (index === 1) {
                            $("#Date select").css("display", "none");
                            $("#dates").append('<div class="input-group" style="flex-wrap: nowrap"><div class="input-group-prepend"><span class="input-group-text"><i class="glyphicon glyphicon-calendar fa fa-calendar"></span></i></div><input type="text" style="width: 200px" name="daterange" class="form-control daterange"/></div>');

                        }
                        if (index === 4) {
                            $("#rap select").css("display", "none");


                        } else if (index === 6) {
                            column.data().unique().sort().each(function (d, j) {
                                select.append('<option value="' + $(d).text() + '">' + $(d).text() + '</option>')
                            });
                        } else if (index === 3) {
                            var NewArrayToAdd = [];
                            column.data().unique().sort().each(function (d, j) {
                                var someText = d.replace(/(\r\n|\n|\r)/gm, "");
                                var newString = someText.replace(/  +/g, ' ');
                                newString = newString.split(' ');
                                NewArrayToAdd.push(newString[0]);
                                //select.append('<option value="' + newString[0] + '">' + newString[0] + '</option>')
                            });
                            var ArrayAddedInSelect = [];
                            var ArrayAddedInSelect = NewArrayToAdd.filter(function (itm, i, NewArrayToAdd) {
                                return i == NewArrayToAdd.indexOf(itm);
                            });
                            for (var i = 0; i < ArrayAddedInSelect.length; i++) {
                                select.append('<option value="' + ArrayAddedInSelect[i] + '">' + ArrayAddedInSelect[i] + '</option>')
                            }
                        } else if (index !== 1) {
                            column.data().unique().sort().each(function (d, j) {
                                select.append('<option value="' + d + '">' + d + '</option>')
                            });
                            // }
                        }
                    });
                },
                "columnDefs": [
                    {responsivePriority: 1, targets: 0},
                    {responsivePriority: 2, targets: 2},
                    {responsivePriority: 3, targets: 6},
                    {targets: [4], orderable: true},
                    {targets: '_all', orderable: false},
                ],

            });
            $('.daterange').daterangepicker({
                autoUpdateInput: false,
                opens: "left",
                locale: {
                    cancelLabel: 'Clear',
                    format: 'DD-MM-YYYY'
                }
            });
            var startDate;
            var endDate;
            var dataIdx = 1;  //current data column to work with
            // $("#mytable_wrapper thead").on("mousedown", "th", function (event) {
            //     var visIdx = $(this).parent().children().index($(this));
            //     dataIdx = table.column.index('fromVisible', visIdx);
            // });


            // Function for converting a dd/mmm/yyyy date value into a numeric string for comparison (example 01-Dec-2010 becomes 20101201
            function parseDateValue(rawDate) {

                var d = moment(rawDate, "DD-MM-YYYY").format('DD-MM-YYYY');
                var dateArray = d.split("-");
                var parsedDate = dateArray[2] + dateArray[1] + dateArray[0];
                return parsedDate;
            }

            //filter on daterange
            $(".daterange").on('apply.daterangepicker', function (ev, picker) {

                ev.preventDefault();


                //if blank date option was selected
                if ((picker.startDate.format('DD-MM-YYYY') == "01-01-0001") && (picker.endDate.format('DD-MM-YYYY')) == "01-01-0001") {
                    $(this).val('Blank');


                    val = "^$";

                    table.column(dataIdx)
                        .search(val, true, false, true)
                        .draw();

                } else {
                    //set field value
                    $(this).val(picker.startDate.format('DD-MM-YYYY') + ' to ' + picker.endDate.format('DD-MM-YYYY'));

                    //run date filter
                    startDate = picker.startDate.format('DD-MM-YYYY');
                    endDate = picker.endDate.format('DD-MM-YYYY');

                    var dateStart = parseDateValue(startDate);
                    var dateEnd = parseDateValue(endDate);

                    var filteredData = table
                        .column(dataIdx)
                        .data()
                        .filter(function (value, index) {

                            var evalDate = value === "" ? 0 : parseDateValue(value);
                            if ((isNaN(dateStart) && isNaN(dateEnd)) || (evalDate >= dateStart && evalDate <= dateEnd)) {

                                return true;
                            }
                            return false;
                        });


                    var val = "";
                    for (var count = 0; count < filteredData.length; count++) {

                        val += filteredData[count] + "|";
                    }

                    val = val.slice(0, -1);


                    table.column(dataIdx)
                        .search(val ? "^" + val + "$" : "^" + "-" + "$", true, false, true)
                        .draw();
                }


            });

            $(".daterange").on('cancel.daterangepicker', function (ev, picker) {
                ev.preventDefault();
                $(this).val('');
                table.column(dataIdx)
                    .search("")
                    .draw();
            });

            $('#plus').one('click', function (e) {
                $(this).attr("disabled", true);
                $.ajax({
                    url: '{{ path('getPreCommandes') }}',
                    type: "POST",
                    success: function (data) {
                        table
                            .clear()
                            .draw();
                        $.each(data, function (key, value) {
                            var d = moment(value.Date).format('DD-MM-YYYY');
                            if (value.archive) {
                                var NC = '<span class="badge bg-success" style="font-size: 85%">' + value.commande + '</span>';
                            } else {
                                var NC = '<span class="badge bg-danger" style="font-size: 85%">Non généré</span>';
                            }
                            table.row.add([
                                value.nCommande,
                                d,
                                value.Client,
                                value.Bus,
                                value.RAP,
                                value.BusinessManager,
                                NC,
                                {% if AutorisationAcces('preCommandeAfficher' , app.user) %}
                                '<a href=' + Routing.generate('AfficherCmd', {id: value.id}) + '><i class="fas fa-search fa-lg" title="Consulter la commande"></i></a>',
                                {% else %}
                                null,
                                {% endif %}
                                null,
                                null
                            ]).draw(false);
                        });
                    },
                    error: function () {
                        alert("Vous ne pouvez pas faire cette action");
                    },
                });
            });

        });

    </script>
{% endblock %}
