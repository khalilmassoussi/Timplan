<?php

namespace TimSoft\CommandeBundle\Repository;

/**
 * LigneCommandeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class LigneCommandeRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @param $id
     * @param $nligne
     * @return mixed
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function findCmd($id, $nligne)
    {
        $query = $this->createQueryBuilder('c')
            ->select('c')
            ->where('c.commande = :id')
            ->andWhere('c.nLigne = :nligne')
            ->setParameter('id', $id)
            ->setParameter('nligne', $nligne)
            ->getQuery();
        return $query->getOneOrNullResult();
    }

    public function caBu()
    {
        $query = $this->createQueryBuilder('c')
            ->select('c.bu,sum(c.montantHT) as CA')
            ->where('LENGTH(c.bu)>0')
            ->groupBy('c.bu')
            ->getQuery();
        return $query->getScalarResult();
    }

    public function getClientByBu($bu)
    {
        return $this->createQueryBuilder('c')
            ->select('distinct(t.client)')
            ->leftJoin('c.commande', 't')
            ->where('c.bu LIKE :bu')
            ->setParameter('bu', $bu->getLibelle())
            ->getQuery()
            ->getScalarResult();
    }

    public function getbyBu($client, $start, $end)
    {
        return $this->createQueryBuilder('l')
            ->select('l')
//            ->where('t.datePiece NOT BETWEEN :monday AND :sunday')
            ->where('t.client = :client')
            ->leftJoin('l.commande', 't')
            ->setParameter('client', $client)
//            ->setParameter('monday', $start)
//            ->setParameter('sunday', $end)
            ->getQuery()
            ->getResult();
    }

    public function getLc()
    {
        return $this->createQueryBuilder('l')
            ->select('l')
            ->where('l INSTANCE OF :type')
            ->setParameter('type', "LigneCommande")
            ->getQuery()
            ->getResult();
    }
}
